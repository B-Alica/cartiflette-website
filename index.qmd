---
echo: false
---

::: {.column-screen-inset}

{{< include "./src/_data.qmd" >}}
{{< include "./src/_globals.qmd" >}}
{{< include "./src/_inputs.qmd" >}}
{{< include "./src/_programs.qmd" >}}


```{ojs}
//| eval: false
// pb de timing
Inputs.table(
    annotationsSources,
    {format: {note: (d) => annotateColumn(d, annotationsSources)}}
)
```

## Récupérer un fond de carte France entière

```{ojs}
db = DuckDBClient.of({})
```

```{ojs}
annotationsSources = await db.query(
  "SELECT * FROM read_csv_auto('https://minio.lab.sspcloud.fr/projet-cartiflette/documentation-website/sources_annotations.csv', header=true) "
)
```


```{ojs}
function annotateColumn(columnName, annotationsSources) {

  const sourceData = annotationsSources.filter(d => d.variable == columnName)[0];
  const sourceSelected = sourceData['source'];
  const url = sourceData['url'];
  const annotation = sourceData['note'];

  // Generate the HTML with a colored footnote, and add an anchor tag to link to the source documentation
  return html`
    <span style="font-weight: bold;"><span style="background-color: #ffcc00; color: black; padding: 2px 5px; border-radius: 3px; cursor: pointer;">
    <a href="${url}" target="_blank" style="color: black; text-decoration: none;" title="${sourceSelected} - ${annotation}">
      ${annotation}
    </a>
  </span></span>
  `;
}
```


```{ojs}
//| output: true
html`<div>${grid}</div>`
```

## Récupérer un fond de carte sur une emprise limitée


```{ojs}
//| output: true
html`<div>${grid_departements}</div>`
```

```{ojs}
grid_departements =  {
    let grid ;

    if (availableWidth>smallScreen){
        grid = html`
        <div style="
            margin: 0;
            border: none;
            display: grid;
            width: ${availableWidth};
            grid-template-areas: 
                'selectors_departements map_departements choice-code_departements'
                '. map_departements code_departements'
                '. map_departements .'
                '. map_departements .'
                'download_departements map_departements .';
            grid-template-columns: 23% 45% 32%;
            ">
            
            <div name="selectors_departements" style="grid-area: selectors_departements; position: relative;">
                ${viewof choice_print_map_departement}
                ${viewof selected_departements}
                ${year_emprise}
                ${format_emprise}
                ${simplification_percent_emprise}
                ${viewof arrondissement}
            </div>
            
            <div name="map_departements" style="grid-area: map_departements; position: relative;">
                ${object_print_map_departement}
            </div>

            <div name="code-bloc-departement" class="code-bloc">
                <div name="choice-code_departements" style="grid-area: choice-code_departements; position: relative;">
                    ${language_emprise_departements}
                </div>

                <div name="code_departements" style="grid-area: code_departements; position: relative;" class="code">
                    <span class="code-bloc-title">
                        Comment faire en <code>${langage_departements}</code> ${logo[langage_departements.toLowerCase()]}
                    </span>
                    <span class="code-content">
                        ${print_program_departement_single(langage_departements, selected_departements, selectedlevel, format, year)}
                    </span>
                </div>
            </div>

            <div name="download-button_departements" style="grid-area: download_departements; position: relative;">
                ${button_departements}
            </div>

        </div>
        `
        return grid
    }

    grid = html`
    <div style="
        margin: 0;
        border: none;
        display: grid;
        width: ${availableWidth};
        grid-template-areas: 
            'selectors_departements'
            'map_departements'
            'download_departements'
            'choice-code_departements'
            'code_departements';
        grid-template-rows: auto auto auto auto auto;
        grid-gap: 10px;
        ">

        <div name="selectors_departements" style="grid-area: selectors_departements; position: relative;">
                ${viewof choice_print_map_departement}
                ${viewof selected_departements}
                ${year_emprise}
                ${format_emprise}
                ${simplification_percent_emprise}
                ${viewof arrondissement}
        </div>
        
        <div name="map_departements" style="grid-area: map_departements; position: relative;">
            ${object_print_map_departement}
        </div>

        <div name="download-button_departements" style="grid-area: download_departements; position: relative;">
            ${button_departements}
        </div>

        <div name="code-bloc-departement" class="code-bloc">
            <div name="choice-code_departements" style="grid-area: choice-code_departements; position: relative;">
                ${language_emprise_departements}
            </div>

            <div name="code_departements" style="grid-area: code_departements; position: relative;" class="code">
                <span class="code-bloc-title">
                    Comment faire en <code>${langage_departements}</code> ${logo[langage_departements.toLowerCase()]}
                </span>
                <span class="code-content">
                    ${print_program_departement_single(langage_departements, selected_departements, selectedlevel, format, year)}
                </span>
            </div>
        </div>

    </div>
    `

    return grid
}
```


<!--------
Objets utiles
---------->

```{ojs}
right_spanner_map_france =  (choice_print_map_france == "Carte") ? spanner_code_france : ""
```

```{ojs}
spanner_code_france = html`
<div name="code-bloc" class="code-bloc">
    <div name="choice-code" style="grid-area: choice-code; position: relative;">
        ${viewof langage_requete}
    </div>
    <div name="code" style="grid-area: code; position: relative;" class="code">
        <span class="code-bloc-title">
            Comment faire en <code>${langage}</code> ${logo[langage.toLowerCase()]}
        </span>
        <span class="code-content">
            ${print_program_france(langage, selectedlevel, format, year, drom_rapproches, simplification_percent)}
        </span>
    </div>
</div>
`
```

```{ojs}
grid_structure = (choice_print_map_france == "Carte") ?
    `'selectors map choice-code'
                '. map code'
                '. map .'
                '. map .'
                'download map .'`
    :
    `'selectors map info'
                '. map info'
                '. map info'
                'download map info'
                'code code info'`
grid_repartition =  (choice_print_map_france == "Carte") ?
    '23% 45% 32%' :
    '23% 65% 12%'
```

```{ojs}
// Source: https://observablehq.com/@mbostock/dashboard
grid = {

    let grid ;

    if (availableWidth>smallScreen){
        grid = html`
        <div class="cartiflette-example" style="
            margin: 0;
            border: none;
            display: grid;
            width: ${availableWidth};
            grid-template-areas: ${grid_structure};
            grid-template-columns: ${grid_repartition};
            ">
            
            <div name="selectors" style="grid-area: selectors; position: relative;">
                ${viewof choice_print_map_france}
                ${viewof year}
                ${viewof selectedlevel}
                ${viewof format}
                ${viewof simplification_percent}
                ${viewof drom_rapproches}
            </div>
            
            <div name="map" style="grid-area: map; position: relative;">
                ${object_print_map_france}
            </div>

            ${right_spanner_map_france}

            <div name="download-button" style="grid-area: download; position: relative;">
                ${button_france}
            </div>

        </div>
        `
        return grid
    }

    grid = html`
    <div class="cartiflette-example" style="
        margin: 0;
        border: none;
        display: grid;
        width: ${availableWidth};
        grid-template-areas: 
            'selectors'
            'map'
            'download'
            'choice-code'
            'code';
        grid-template-rows: auto auto auto auto auto;
        grid-gap: 10px;
        ">

        <div name="selectors" style="grid-area: selectors; position: relative;">
            ${viewof choice_print_map_france}
            ${viewof year}
            ${viewof selectedlevel}
            ${viewof format}
            ${viewof simplification_percent}
            ${viewof drom_rapproches}
        </div>
        
        <div name="map" style="grid-area: map; position: relative;">
            ${object_print_map_france}
        </div>

        <div name="download-button" style="grid-area: download; position: relative;">
            ${button_france}
        </div>

        <div name="code-bloc" class="code-bloc">
            <div name="choice-code" style="grid-area: choice-code; position: relative;">
                ${viewof langage_requete}
            </div>

            <div name="code" style="grid-area: code; position: relative;" class="code">
                <span class="code-bloc-title">
                    Comment faire en <code>${langage}</code> ${logo[langage.toLowerCase()]}
                </span>
                <span class="code-content">
                    ${print_program_france(langage, selectedlevel, format, year, drom_rapproches, simplification_percent)}
                </span>
            </div>
        </div>

    </div>
    `
    return grid
}
```

```{ojs}
map_france = topohelper
  .from(
    await data_france
  )
  .project({ proj: l93 })
  .view({
    tooltip: true,
    zoom: true,
    size: [
        availableWidth > smallScreen ? availableWidth*0.4 : availableWidth*0.95, availableHeight * 0.6
    ]})
```

```{ojs}
viewof choice_print_map_france  = Inputs.bind(
    Inputs.radio(['Carte', 'Métadonnées associées'], {value: "Carte"}),
    viewof choice_print_map_departement
)
```

```{ojs}
object_print_map_france = (choice_print_map_france == "Carte") ?
    map_france :
    viewof table_attributes_map_france
```


```{ojs}
function annotateFields(x, annotationsSources) {
    // Extract the keys from the input object
    const fields = Object.keys(x[0]);

    // Create a new object with annotated values for each field
    const annotatedObject = {};
    fields.forEach(field => {
        annotatedObject[field] = annotateColumn(field, annotationsSources);
    });

    // Return an array where the first element is the annotated object and the second is the original object
    return [annotatedObject, ...x];
}
```

```{ojs}
mapping = Object.keys(attributes_map_france[0]).reduce((acc, key) => {
    acc[key] = (d) => html`<div>${d}</div>`;
    return acc;
}, {})
```

```{ojs}
viewof table_attributes_map_france = Inputs.table(
    annotateFields(attributes_map_france, annotationsSources),
    {
        format: mapping
    }
)
```


```{ojs}
viewof choice_print_map_departement  = Inputs.radio(['Carte', 'Métadonnées associées'], {value: "Carte"})
```

```{ojs}
object_print_map_departement = (choice_print_map_departement == "Carte") ?
    map_multiple_departement :
    viewof table_attributes_map_department
```



:::